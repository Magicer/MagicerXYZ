<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Magicer]]></title>
  <subtitle><![CDATA[Magicer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://m.magicer.xyz/"/>
  <updated>2016-09-05T06:42:51.000Z</updated>
  <id>http://m.magicer.xyz/</id>
  
  <author>
    <name><![CDATA[Magicer]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[test]]></title>
    <link href="http://m.magicer.xyz/2016/09/test/"/>
    <id>http://m.magicer.xyz/2016/09/test/</id>
    <published>2016-09-05T06:08:13.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="测试Travis-CI">测试Travis-CI</h2>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="测试Travis-CI">测试Travis-CI</h2>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[为Hexo NexT主题添加ShareSDK的分享]]></title>
    <link href="http://m.magicer.xyz/2016/04/add-sharesdk/"/>
    <id>http://m.magicer.xyz/2016/04/add-sharesdk/</id>
    <published>2016-04-19T03:43:59.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>今天发现一个分享的的sdk,可以在各个平台使用。由于不太喜欢主题提供的几个分享的样式。就试了试怎么这个。发现还是不错滴。。下面是分享的按钮和分享的样式：<br><strong>效果见下面——</strong><br>传送门：<a href="http://sharesdk.mob.com/#/sharesdk" target="_blank" rel="external">ShareSDK</a><br><a href="http://wiki.mob.com/sharesdk-for-web%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90/" target="_blank" rel="external">Web集成官方文档</a></p>
<p>下面是在网页上分享按钮的代码，只需要将以下代码添加到想要显示的位置即可。<code>appkey</code>是你自己的appkey。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MOB SHARE BEGIN--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-ui-button -mob-share-open"</span>&gt;</span>分享<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-ui"</span> <span class="attribute">style</span>=<span class="value">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"-mob-share-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-weibo"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-tencentweibo"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>腾讯微博<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-qzone"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>QQ空间<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-qq"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>QQ好友<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-renren"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>人人网<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-kaixin"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>开心网<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-douban"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>豆瓣<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-facebook"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"-mob-share-twitter"</span>&gt;</span><span class="tag">&lt;<span class="title">p</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="title">p</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"-mob-share-ui-bg"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"-mob-share"</span> <span class="attribute">src</span>=<span class="value">"http://f1.webshare.mob.com/code/mob-share.js?appkey=你的appkey"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MOB SHARE END--&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="添加到NexT中">添加到NexT中</h2><p>那么怎么添加到next主题上呢。步骤如下</p>
<h3 id="1-创建文件">1.创建文件</h3><p>我们首先要在主题文件夹下的<code>layout</code>文件夹找到<code>_partials</code>下的<code>share</code>文件夹，之后添加一个名为<code>sharesdk.swig</code>的文件。我们可以看出来。这个文件夹下放的全部是分享的配置文件.添加的内容为上面的那一大段代码。只需要修改一部分。修改的部分为：<br><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">id</span>=<span class="value">"-mob-share"</span> <span class="attribute">src</span>=<span class="value">"http://f1.webshare.mob.com/code/mob-share.js?appkey=</span></span></span><span class="expression">&#123;&#123; <span class="variable">theme.shareSDKappkey</span> &#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>修改这写的目的是为了让我们能够在主题的配置文件中添加appkey。（只需要在主题的配置文件中添加一个<code>shareSDKappkey</code>并为其附上值即可）。</p>
<h3 id="2添加可选配置">2添加可选配置</h3><p>虽然我们添加了sharesdk的分享的按钮了，但是如果有一天我们不想使用了呢。当然，很简单。只需要修改配置文件就可以了。那么如何实现呢？<br>首先，找到主题文件夹下的<code>layout</code>文件夹下的<code>post.swig</code><br>大概在16行左右添加<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"post-spread"</span>&gt;</span></span><br><span class="line">  </span><span class="template_tag">&#123;% <span class="keyword">if</span> theme.jiathis %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/jiathis.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% elseif theme.baidushare %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/baidushare.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% elseif theme.add_this_id %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/add-this.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% elseif theme.duoshuo_shortname and theme.duoshuo_share %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/duoshuo_share.swig' %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% elseif theme.sharesdk %&#125;</span><span class="xml"></span><br><span class="line">    </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/sharesdk.swig' %&#125;</span><span class="xml"></span><br><span class="line">  </span><span class="template_tag">&#123;% <span class="keyword">endif</span> %&#125;</span><span class="xml"></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>添加了代码<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% elseif theme.sharesdk %&#125;</span><span class="xml"></span><br><span class="line">        </span><span class="template_tag">&#123;% <span class="keyword">include</span> '_partials/share/sharesdk.swig' %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
<p>这段代码就是根据主题文件的配置，来为文档添加相应的swig文件。要想实现在配置文件中选择性的使用分享功能，只需要在配置文件中修改即可。</p>
<h2 id="修改_config-yml">修改_config.yml</h2><p>接下来就是修改项目的配置文件了。<br>在主题的配置文件中添加：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#Share</span></span><br><span class="line"><span class="label">sharesdk:</span> true</span><br><span class="line"><span class="label">shareSDKappkey:</span> appkey</span><br></pre></td></tr></table></figure></p>
<p>如果想使用就可以设置为true并添加appkey了。当然不想使用。直接注释就可以了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天发现一个分享的的sdk,可以在各个平台使用。由于不太喜欢主题提供的几个分享的样式。就试了试怎么这个。发现还是不错滴。。下面是分享的按钮和分享的样式：<br><strong>效果见下面——</strong><br>传送门：<a href="http://sharesdk.]]>
    </summary>
    
      <category term="hexo,NexT" scheme="http://m.magicer.xyz/tags/hexo-NexT/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[修改了host文件之后github无法记载样式表的解决方案]]></title>
    <link href="http://m.magicer.xyz/2016/04/github-could-not-load-css/"/>
    <id>http://m.magicer.xyz/2016/04/github-could-not-load-css/</id>
    <published>2016-04-06T05:37:13.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>今天由于某种原因想要使用Google结果就修改了Host文件，结果发现，在登录Githu的时候无法加载样式表了。好悲催，好不容易Google可以使用了，不能把host文件在改回去吧，不能忍。于是，看了分析了一下github页面，发现：<br><img src="/image/Github/css_js_loaded/problem.png" alt="Problem"><br><img src="/image/Github/css_js_loaded/network.png" alt="Network"></p>
<p>  复制上图中的地址 然后在<a href="http://ipaddress.com/ip-lookup/" target="_blank" rel="external">ipaddress.com</a>上找到该地址的IP。例如：<br>  <img src="/image/Github/css_js_loaded/detail.png" alt="Detail"></p>
<p>  查找完之后，打开host文件添加<br>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span>  assets-cdn<span class="class">.github</span><span class="class">.com</span></span><br></pre></td></tr></table></figure></p>
<p>  其他的资源无法加载，解决方法类似：<br>  下面是我往host文件中添加的记录：<br>  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">	 # Github start</span><br><span class="line">	<span class="number">192.30</span>.<span class="number">252.141</span>	gist.github.<span class="keyword">com</span></span><br><span class="line"># Github end</span><br><span class="line">#fix github cdn problem because of GFW</span><br><span class="line">#<span class="number">185.31</span>.<span class="number">17.184</span>  github.<span class="keyword">global</span>.ssl.fastly.net</span><br><span class="line"><span class="number">23.235</span>.<span class="number">40.133</span> assets-cdn.github.<span class="keyword">com</span></span><br><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span> avatars3.githubusercontent.<span class="keyword">com</span></span><br><span class="line"><span class="number">23.235</span>.<span class="number">40.133</span> avatars1.githubusercontent.<span class="keyword">com</span></span><br><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span> avatars0.githubusercontent.<span class="keyword">com</span></span><br><span class="line"><span class="number">192.30</span>.<span class="number">252.120</span> 	github.<span class="keyword">com</span></span><br><span class="line"><span class="number">185.31</span>.<span class="number">17.133</span> avatars2.githubusercontent.<span class="keyword">com</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天由于某种原因想要使用Google结果就修改了Host文件，结果发现，在登录Githu的时候无法加载样式表了。好悲催，好不容易Google可以使用了，不能把host文件在改回去吧，不能忍。于是，看了分析了一下github页面，发现：<br><img src="/image]]>
    </summary>
    
      <category term="github" scheme="http://m.magicer.xyz/tags/github/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java插入排序，选择排序和冒泡排序的简单使用]]></title>
    <link href="http://m.magicer.xyz/2016/03/bubble-selection-insert-sort-1/"/>
    <id>http://m.magicer.xyz/2016/03/bubble-selection-insert-sort-1/</id>
    <published>2016-03-14T11:18:41.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中的进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<h2 id="冒泡排序">冒泡排序</h2><p>经过一次次的交换，最小的数慢慢的交换到数组开头，像冒泡泡。</p>
<p>专业描述：<br> 前提条件：序列S={S0,S1,S2….Sn-1}是n个可排序元素的系列<br> 1、令j从n-1递增到j，重复 2—4<br> 2、令i从1递增到j，重复 3<br> 3、如果元素Si-1个Si成反序 交换他们<br> 4、结束标记，序列{S0………Sj}被排序，且Sj最大    </p>
<p>算法步骤：<br>1、比较相邻的元素，如果第一个大，就交换他们。<br>2、对每一个相邻的元素都比较并交换，从开始到最后一对，每次都可以保证最后的那个元素是最大的。<br>3、针对所有的元素，重复执行，除了最后一个（因为最后一个已经是最大的）。<br>4、每次重复上面的步骤，知道没有任何一对数字需要比较<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[]arr)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> temp;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;  <span class="comment">//控制循环次数，最多length-1次</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;   </span><br><span class="line">				<span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;  <span class="comment">//交换，大的值交换到后面</span></span><br><span class="line">					temp=arr[j];</span><br><span class="line">					arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">					arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//打印出每次排序的数组；</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> num:arr)&#123;</span><br><span class="line">				System.out.print(num+<span class="string">"  "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arrays=&#123;<span class="number">12</span>,<span class="number">14</span>,<span class="number">65</span>,<span class="number">21</span>,<span class="number">23</span>,<span class="number">3</span>,<span class="number">45</span>,<span class="number">4</span>&#125;;</span><br><span class="line">		bubbleSort(arrays);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>伪代码如下：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i &lt;<span class="comment">---1 to length[A]</span></span><br><span class="line">	do <span class="keyword">for</span> j &lt;<span class="comment">---length[A] down to i+1</span></span><br><span class="line">		do <span class="keyword">if</span> A[j] &lt; A[j-<span class="number">1</span>]</span><br><span class="line">		<span class="keyword">then</span> exchange A[j] &lt;<span class="comment">--&gt; A[j-1]</span></span><br></pre></td></tr></table></figure></p>
<p>在网上找了个图示，如下：<br><img src="/image/sort/bubble.gif" alt="Bubble Sort"></p>
<h2 id="插入排序">插入排序</h2><p>插入排序的一个典型例子就是扑克牌，联想一下扑克牌我们就可以很好的理解插入排序是如何工作的。<br>算法步骤：<br>1、将待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当作是未排序序列。<br>2、从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素和有序序列中的某个元素相等，则将带插入元素插入到相等元素的后面）<br><img src="/image/sort/insert.gif" alt="Insert Short"></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j &lt;<span class="comment">-- 2 to length[A]</span></span><br><span class="line">	<span class="built_in">do</span> key &lt;<span class="comment">-- A[j]</span></span><br><span class="line">	<span class="comment">##insert A[j] into the sorted sequence A[1......j-1]</span></span><br><span class="line">	i &lt;<span class="comment">--j-1</span></span><br><span class="line">	<span class="keyword">while</span> i &gt;=<span class="number">0</span> <span class="operator">and</span> A[i] &gt; key</span><br><span class="line">		<span class="built_in">do</span> A[i+<span class="number">1</span>] &lt;<span class="comment">-- A[i]</span></span><br><span class="line">		i &lt;<span class="comment">-- i</span></span><br><span class="line">	A[i+<span class="number">1</span>] &lt;<span class="comment">-- key</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;<span class="keyword">int</span> insertNode;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">		insertNode = array[i];</span><br><span class="line">		j = i+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;insertNode &lt; array[j])&#123;</span><br><span class="line">			array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">			j--</span><br><span class="line">&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="选择排序">选择排序</h2><p><img src="/image/sort/selection.gif" alt="Selection Sort"></p>
<p>基本思想：直接选择排序的基本思想是：第i趟排序开始时，当前有序区和无序区分别为R[1····i-1]和R[i····n]（1&lt;=i&lt;=n）该趟排序则是从当前无序区选出关键字最小的记录 R[k] 将它与无序区的第一个记录R[i]交换，使R[1····i]和R[i+1···n]分别变为新的有序区和新的无序区。因为每趟排序均使有序区中增加了一个记录，且有序区中的记录关键字均不大于无序区中记录的关键字，即第i趟排序之后 R[1···i].keys&lt;=R[i+1···n].keys 所以进行n-1趟排序之后有R[1·····n-1].key,即经过n-1趟排序之后，整个文件R[1····n]递增有序。注意：第1趟排序开始时，无序区为R[1·····n]。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">choose</span><span class="params">(<span class="keyword">int</span>[] <span class="built_in">array</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> tmp = a[i];</span><br><span class="line">		<span class="keyword">int</span> index = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)&#123;  </span><br><span class="line">			<span class="keyword">if</span>(tmp&gt;<span class="built_in">array</span>[j])&#123;     <span class="comment">//比较值，取出值小的下标</span></span><br><span class="line">				tmp = <span class="built_in">array</span>[j];</span><br><span class="line">				index = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i!=index)&#123;   <span class="comment">//交换两个的值，当前最小值的坐标等于当前坐标时。</span></span><br><span class="line">			<span class="keyword">int</span> k = <span class="built_in">array</span>[i];</span><br><span class="line">			<span class="built_in">array</span>[i] = <span class="built_in">array</span>[index];</span><br><span class="line">			<span class="built_in">array</span>[index] = k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中的进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>
<h2 id="冒泡排序">冒泡排序</h2><p>经过一次次的交换，最小的数慢慢的交换到数组开头，像冒泡]]>
    </summary>
    
      <category term="sort" scheme="http://m.magicer.xyz/tags/sort/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java static关键字及静态代码块的使用]]></title>
    <link href="http://m.magicer.xyz/2016/03/java-static-keywords/"/>
    <id>http://m.magicer.xyz/2016/03/java-static-keywords/</id>
    <published>2016-03-08T11:41:04.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>  在了解static之前 ，先来了解下this关键字。多少有点渊源；首先 this是什么意识呢？this指代当前的对象 用法如下：</p>
<h1 id="this关键字">this关键字</h1><h2 id="this指代当前对象">this指代当前对象</h2>  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> class Cirlcle &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="constant">PI</span>=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line">Point <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">public</span> Cirlcle()&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Cirlcle(<span class="keyword">double</span> radius,Point <span class="built_in">point</span>)&#123;</span><br><span class="line">	<span class="keyword">this</span>.radius=radius;</span><br><span class="line">	<span class="keyword">this</span>.<span class="built_in">point</span>=<span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>  在此程序中this指代当前对象，如果不加上this时，将无法达到预期的效果，因为形式参数radius的作用域只在方法里，当加上this时代表的是当前对象的radius，所以此时可以达到为对象的域赋值的作用。</p>
<p>  this只能在方法内部使用，表示对”调用方法的那个对象“的引用，如果在方法内部调用同一个类的另一个方法则不用用this，直接调用即可。只有需要明确指出对当前对象的引用时，才需要使用this关键字。</p>
<h2 id="this调用构造器">this调用构造器</h2><pre><code>还是那个程序：

<span class="comment"><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> class Cirlcle &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="constant">PI</span>=<span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> radius;</span><br><span class="line">Point <span class="built_in">point</span>;</span><br><span class="line"><span class="keyword">public</span> Cirlcle(<span class="keyword">double</span> radius)&#123;	</span><br><span class="line">	<span class="keyword">this</span>(radius,<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Cirlcle(<span class="keyword">double</span> radius,Point <span class="built_in">point</span>)&#123;</span><br><span class="line">	<span class="keyword">this</span>.radius=radius;</span><br><span class="line">	<span class="keyword">this</span>.<span class="built_in">point</span>=<span class="built_in">point</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></span>
</code></pre><p>  在重载的一个参数的构造器中就调用了另一个构造器Cirlcle(double radius,Point point)，利用次构造器来在当前构造器中对域进行初始化工作。<br>  但是此时要注意的是，this()必须放在方法的第一行。</p>
<p>  this还有另外一个用法，即用在return语句上。</p>
  <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">		price=<span class="number">100.0</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book price:"</span>+price);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;	<span class="comment">//返回对当前对象的引用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		name=<span class="string">"Thinking in Java"</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book name:"</span>+name);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;   <span class="comment">//返回对当前对象的引用</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Book book = <span class="keyword">new</span> Book();</span><br><span class="line">		book.printName().printPrice();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在方法中由于利用return返回了对当前对象的引用，所以可以使用<code>.</code>来执行多条语句</p>
<p>   接下来，就要来讲解static的用法了。准备好了么？</p>
<h1 id="static关键字">static关键字</h1><p>static：静态；</p>
<h2 id="static域">static域</h2><p>static域是所有对象所共有的，是属于类所有，而不是特定的对象。当对其进行<br>我们还是用上面的程序，例如：书都是一个特定图书馆的，所以此时我们就可以定义一个static类型的域来表明所有的Book都是国家图书馆的。<br>此时我们就可以这样定义：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> String library=<span class="string">"国家图书馆"</span>; <span class="comment">//static域</span></span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">		price=<span class="number">100.0</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book price:"</span>+price);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">printName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		name=<span class="string">"Thinking in Java"</span>;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"Book name:"</span>+name);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Book book = <span class="keyword">new</span> Book();</span><br><span class="line">		book.printName().printPrice();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"library:"</span>+Book.library);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当定义了static域之后我们就可以用 <code>类名.域</code> 来的到该值<br>static域在内存中有一块特定的内存，每个对象所公用，当在一个对象中对其进行了修改，则其他对象的词域也会被修改。<br><strong>notes</strong>:构造器中不要有static域；</p>
<h2 id="static方法">static方法</h2><p> 利用static修饰的方法就是static方法；最典型的就是main()<br> static字段对于每个对象都是公用的同一块内存区域。而static方法的一个最主要的用法是在没有创建对象的情况下调用方法。<br> static方法就是没有this的方法（也没有super），而且在static的内部不能调用非静态方法和非静态域；</p>
<p> 在上面的代码中添加<br> <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">printInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.<span class="keyword">out</span>.println(name+price); <span class="comment">//error 静态方法中不能调用非静态域</span></span><br><span class="line">	printName();   <span class="comment">//error 静态方法中不能调用非静态方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="static代码块">static代码块</h2><p> 代码块是用{}括起来的部分；在方法中的是一般代码块，在类中声明的一般代码块就是构造代码块。而用static修饰的代码块就是静态代码块；当然还有同步代码块，现在就不做介绍了。<br> 接下来我们来看个程序：</p>
 <figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 此程序的运行结果为：</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">一般代码块</span><br></pre></td></tr></table></figure>
<p>我们可以看到，最先执行的是静态代码块。而不是在main()方法中的一般代码块。<br>静态代码块是最先执行的，以载入类就执行了。</p>
<p>再看下面的程序：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> Book();   <span class="comment">//添加了一行</span></span><br><span class="line">		<span class="keyword">new</span> Book();   <span class="comment">//添加了一行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而此时的运行结果是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">一般代码块</span><br><span class="line">构造代码块</span><br><span class="line">构造代码块</span><br></pre></td></tr></table></figure>
<p>可以看到，构造代码块只有在创建对象的时候才会执行。</p>
<p>构造代码块跟构造器又是那个先执行的呢？<br>来看下面的代码：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造器"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块#####"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块#####"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123; </span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"构造代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">new</span> Book();</span><br><span class="line">		<span class="keyword">new</span> Book();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果是：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">静态代码块<span class="preprocessor">#####</span></span><br><span class="line">静态代码块</span><br><span class="line">一般代码块</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br></pre></td></tr></table></figure></p>
<p>通过运行结果可以看到，最先执行的是静态代码块并且靠上的静态代码块先执行，然后是一般代码块,然后是构造代码块，靠上的先执行，然后才是构造器；</p>
<p>那么下面的顺序呢？运行结果是？</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="type">Book</span><span class="literal">()</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="type">Book</span><span class="literal">()</span>;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">System</span>.out.println(<span class="string">"一般代码块"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果是：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">静态代码块<span class="preprocessor">#####</span></span><br><span class="line">静态代码块</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">构造代码块<span class="preprocessor">#####</span></span><br><span class="line">构造代码块</span><br><span class="line">构造器</span><br><span class="line">一般代码块</span><br></pre></td></tr></table></figure></p>
<p>显而易见了，先创建对象就先执行构造代码块构造器，然后是一般代码块，按顺序执行，谁靠上谁先执行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  在了解static之前 ，先来了解下this关键字。多少有点渊源；首先 this是什么意识呢？this指代当前的对象 用法如下：</p>
<h1 id="this关键字">this关键字</h1><h2 id="this指代当前对象">this指代当前对象</h2>  ]]>
    </summary>
    
      <category term="static" scheme="http://m.magicer.xyz/tags/static/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jsoup.jar的使用]]></title>
    <link href="http://m.magicer.xyz/2016/03/Java-Jsoup-jar-1/"/>
    <id>http://m.magicer.xyz/2016/03/Java-Jsoup-jar-1/</id>
    <published>2016-03-02T12:34:25.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>Jsoup的使用方法参见：<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">http://www.open-open.com/jsoup/</a>.上面是中文版的也有官方API。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 通过网页来获取数据。</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line">Document doc =Jsoup.connect(<span class="string">"http://blog.magicer.xyz/"</span>).get();</span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 得到页面中 第一个class为“post-title”的内容，然后输出其的值</span><br><span class="line"> *</span><br><span class="line">  */</span></span><br><span class="line">org.jsoup.nodes.Element string=doc.getElementsByClass(<span class="string">"post-title"</span>).first();</span><br><span class="line">		System.out.println(string); <span class="comment">/*输出结果为</span><br><span class="line">		&lt;h1 class="post-title" itemprop="name headline"&gt;</span><br><span class="line">		 &lt;a class="post-title-link" </span><br><span class="line">		 href="/2016/03/eclipse-import-jar/" itemprop="url"&gt; </span><br><span class="line">		 Eclipse如何导入外部jar包 &lt;/a&gt; &lt;/h1&gt;</span><br><span class="line">		*/</span></span><br><span class="line">		String title=string.text();</span><br><span class="line">  <span class="comment">/*</span><br><span class="line">   * 获得class名为post-title-link的属性的值</span><br><span class="line">   * (此处是一个a标签的href属性的值：/2016/03/eclipse-import-jar/)</span><br><span class="line">   * </span><br><span class="line">   */</span></span><br><span class="line">  String string2=doc.getElementsByClass(<span class="string">"post-title-link"</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">  System.out.println(string2);   <span class="comment">//输出结果为：/2016/03/eclipse-import-jar/</span></span><br><span class="line">System.out.println(title);  	<span class="comment">//输出结果是：Eclipse如何导入外部jar包 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 通过get()方法得到body的内容 get()方法的索引（index）从0 （即first（）方法）开始</span><br><span class="line"> * 	get(0)=first();</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line">org.jsoup.nodes.Element postBodyString= doc.getElementsByClass(<span class="string">"post-body"</span>).get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">String postBody=postBodyString.text();  <span class="comment">//得到post-body的内容</span></span><br><span class="line">System.out.println(postBody);  <span class="comment">// 可以正常的输出post-body的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 获得menu菜单项</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line">org.jsoup.nodes.Element element=doc.getElementsByClass(<span class="string">"menu"</span>).first();</span><br><span class="line"></span><br><span class="line">String menu= element.text();</span><br><span class="line">System.out.println(menu);  <span class="comment">// 输出结果为：首页 分类 归档 标签 关于</span></span><br></pre></td></tr></table></figure>
<p>Elements这个对象提供了一系列类似于DOM的方法来查找元素，抽取并处理其中的数据。具体如下：</p>
<h3 id="查找元素">查找元素</h3><p>getElementById(String id)<br>getElementsByTag(String tag)<br>getElementsByClass(String className)<br>getElementsByAttribute(String key) (and related methods)<br>Element siblings: siblingElements(), firstElementSibling(), lastElementSibling();nextElementSibling(), previousElementSibling()<br>Graph: parent(), children(), child(int index)</p>
<h3 id="元素数据">元素数据</h3><p>attr(String key)获取属性attr(String key, String value)设置属性<br>attributes()获取所有属性<br>id(), className() and classNames()<br>text()获取文本内容text(String value) 设置文本内容<br>html()获取元素内HTMLhtml(String value)设置元素内的HTML内容<br>outerHtml()获取元素外HTML内容<br>data()获取数据内容（例如：script和style标签)<br>tag() and tagName()</p>
<h3 id="操作HTML和文本">操作HTML和文本</h3><p>append(String html), prepend(String html)<br>appendText(String text), prependText(String text)<br>appendElement(String tagName), prependElement(String tagName)<br>html(String value)</p>
<h3 id="Selector选择器概述">Selector选择器概述</h3><p>tagname: 通过标签查找元素，比如：a<br>ns|tag: 通过标签在命名空间查找元素，比如：可以用 fb|name 语法来查找 <fb:name> 元素<br><code>#id</code>: 通过ID查找元素，比如：#logo<br>.class: 通过class名称查找元素，比如：.masthead</fb:name></p>
<p>[^attr]: 利用属性名前缀来查找元素，比如：可以用[^data-] 来查找带有HTML5 Dataset属性的元素</p>
<p>[attr^=value], [attr$=value], [attr<em>=value]: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：[href</em>=/path/]<br>[attr~=regex]: 利用属性值匹配正则表达式来查找元素，比如： img[src~=(?i).(png|jpe?g)]<br><em>: 这个符号将匹配所有元素<br>Selector选择器组合使用<br>el#id: 元素+ID，比如： div#logo<br>el.class: 元素+class，比如： div.masthead<br>el[attr]: 元素+class，比如： a[href]<br>任意组合，比如：a[href].highlight<br>ancestor child: 查找某个元素下子元素，比如：可以用.body p 查找在”body”元素下的所有p元素<br>parent &gt; child: 查找某个父元素下的直接子元素，比如：可以用div.content &gt; p 查找 p 元素，也可以用body &gt; </em> 查找body标签下所有直接子元素<br>siblingA + siblingB: 查找在A元素之前第一个同级元素B，比如：div.head + div<br>siblingA ~ siblingX: 查找A元素之前的同级X元素，比如：h1 ~ p<br>el, el, el:多个选择器组合，查找匹配任一选择器的唯一元素，例如：div.masthead, div.logo</p>
<h3 id="伪选择器selectors">伪选择器selectors</h3><p>:lt(n): 查找哪些元素的同级索引值（它的位置在DOM树中是相对于它的父节点）小于n，比如：td:lt(3) 表示小于三列的元素<br>:gt(n):查找哪些元素的同级索引值大于n，比如： div p:gt(2)表示哪些div中有包含2个以上的p元素<br>:eq(n): 查找哪些元素的同级索引值与n相等，比如：form input:eq(1)表示包含一个input标签的Form元素<br>:has(seletor): 查找匹配选择器包含元素的元素，比如：div:has(p)表示哪些div包含了p元素<br>:not(selector): 查找与选择器不匹配的元素，比如： div:not(.logo) 表示不包含 class=”logo” 元素的所有 div 列表<br>:contains(text): 查找包含给定文本的元素，搜索不区分大不写，比如： p:contains(jsoup)<br>:containsOwn(text): 查找直接包含给定文本的元素<br>:matches(regex): 查找哪些元素的文本匹配指定的正则表达式，比如：div:matches((?i)login)<br>:matchesOwn(regex): 查找自身包含文本匹配指定正则表达式的元素<br>注意：上述伪选择器索引是从0开始的，也就是说第一个元素索引值为0，第二个元素index为1等<br>可以查看Selector API参考来了解更详细的内容</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Jsoup的使用方法参见：<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">http://www.open-open.com/jsoup/</a>.上面是中文版的也有官方API。]]>
    </summary>
    
      <category term="Java" scheme="http://m.magicer.xyz/tags/Java/"/>
    
      <category term="Jsoup" scheme="http://m.magicer.xyz/tags/Jsoup/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Eclipse如何导入外部jar包]]></title>
    <link href="http://m.magicer.xyz/2016/03/eclipse-import-jar/"/>
    <id>http://m.magicer.xyz/2016/03/eclipse-import-jar/</id>
    <published>2016-03-02T11:39:01.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>今天需要往自己的项目中添加外部jar包，在这里记录下过程：</p>
<h2 id="第一步">第一步</h2><p> 第一步当然是先下载jar文件</p>
<h2 id="第二步">第二步</h2><p> 在项目内新建lib文件夹，把.jar文件copy进去；</p>
<h2 id="第三步">第三步</h2><p> 在项目上右键 找到<code>Build Path</code>之后选择<code>Configure Build Path</code>,会出现：</p>
<p> <img src="/image/eclipse-import-jar1.png" alt="eclipse-setting"></p>
<p> 点击<code>Add JARs</code>    找到jar文件 添加，之后点击确定。</p>
<p> 之后就可以愉快的使用了。图片太少，以后再添加吧。就先记录到这些。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天需要往自己的项目中添加外部jar包，在这里记录下过程：</p>
<h2 id="第一步">第一步</h2><p> 第一步当然是先下载jar文件</p>
<h2 id="第二步">第二步</h2><p> 在项目内新建lib文件夹，把.jar文件copy进去；</p>
<h]]>
    </summary>
    
      <category term="Eclipse" scheme="http://m.magicer.xyz/tags/Eclipse/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[eclipse使用过程中遇到的问题]]></title>
    <link href="http://m.magicer.xyz/2016/03/eclipse-problem-1/"/>
    <id>http://m.magicer.xyz/2016/03/eclipse-problem-1/</id>
    <published>2016-03-01T01:38:34.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>在使用eclipse的时候遇到到很多问题，在这里记录一下。</p>
<h2 id="Failed_to_create_the_Java_Virtual_Machine_的问题的解决">Failed to create the Java Virtual Machine 的问题的解决</h2><p>  path等的配置都没有问题，但是运行eclipse的时候还是无法运行 ，那么怎么解决呢？<br>   在eclipse文件夹下找到<code>eclipse.ini</code> 文件 打开修改为下面</p>
<pre><code> -startup
plugins/org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.launcher_1</span>.<span class="number">3.0</span><span class="class">.v20120522-1813</span><span class="class">.jar</span>
--launcher<span class="class">.library</span>
plugins/org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.launcher</span><span class="class">.win32</span><span class="class">.win32</span><span class="class">.x86_1</span>.<span class="number">1.200</span><span class="class">.v20120913-144807</span>
-product
com<span class="class">.android</span><span class="class">.ide</span><span class="class">.eclipse</span><span class="class">.adt</span><span class="class">.package</span><span class="class">.adtproduct</span>
-showsplash
org<span class="class">.eclipse</span><span class="class">.platform</span>
--launcher<span class="class">.XXMaxPermSize</span>
<span class="number">128</span>m
--launcher<span class="class">.defaultAction</span>
openFile
-vmargs
-Dosgi.requiredJavaVersion=<span class="number">1.6</span>
-XX:MaxPermSize=<span class="number">256</span>m
-Xms512m
-Xmx512m
</code></pre><p>即修改这几个地方：<code>--launcher.XXMaxPermSize
 128m</code>  <code>-Dosgi.requiredJavaVersion=1.7</code><br> <code>-XX:MaxPermSize=256m
 -Xms512m
 -Xmx512m</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在使用eclipse的时候遇到到很多问题，在这里记录一下。</p>
<h2 id="Failed_to_create_the_Java_Virtual_Machine_的问题的解决">Failed to create the Java Virtual Machine 的问题]]>
    </summary>
    
      <category term="eclipse" scheme="http://m.magicer.xyz/tags/eclipse/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java笔记（一）]]></title>
    <link href="http://m.magicer.xyz/2015/12/java-note-one/"/>
    <id>http://m.magicer.xyz/2015/12/java-note-one/</id>
    <published>2015-12-05T04:01:36.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>用于记录java的一些知识。</p>
<h2 id="StringBuffer">StringBuffer</h2><p>StringBuffer线程安全的，<br>StringBuilder线程不安全，在大多数实现中比StringBuffer快<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer <span class="keyword">sb</span>= <span class="keyword">new</span> StringBuffer(<span class="string">"sb"</span>);</span><br><span class="line">        <span class="keyword">sb</span>.<span class="built_in">append</span>(<span class="string">"+2sb"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">sb</span>);</span><br><span class="line">        System.out.println(<span class="keyword">sb</span>.length());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">sb</span>.<span class="built_in">delete</span>(<span class="number">2</span>, <span class="number">3</span>);//删除第二个字符 </span><br><span class="line">        System.out.println(<span class="keyword">sb</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>用于记录java的一些知识。</p>
<h2 id="StringBuffer">StringBuffer</h2><p>StringBuffer线程安全的，<br>StringBuilder线程不安全，在大多数实现中比StringBuffer快<br><figure cl]]>
    </summary>
    
      <category term="java" scheme="http://m.magicer.xyz/tags/java/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[404界面的样式表无法加载问题]]></title>
    <link href="http://m.magicer.xyz/2015/10/blog-404-style-not-found/"/>
    <id>http://m.magicer.xyz/2015/10/blog-404-style-not-found/</id>
    <published>2015-10-28T13:54:13.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p> 今天终于发现了404页面样式表无法加载的的解决方法。</p>
<p> 原先的时候是当输入的域名后有多个<code>/</code>的时候404页面的样式表无法加载，比如访问的页面是<br> <code>http://magicer.xyz/dd/d</code>。此时就无法加载样式表，而如果网址是 <code>http://magicer.xyz/dd</code>样式表就可以加载。处了此问题后，问题一直没有解决，但是今天突然发现了解决方法<br> 原先的link是<br> <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">media=</span><span class="string">"screen"</span> <span class="variable">href=</span><span class="string">"styl4.css"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p> 而现在是<br> <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">media=</span><span class="string">"screen"</span> <span class="variable">href=</span><span class="string">"/styl4.css"</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p> 只加了个`/``问题就解决了，但是 在电脑上测试的时候无法加载样式表，但是传到服务器上之后就可以。头像的问题一样如此解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p> 今天终于发现了404页面样式表无法加载的的解决方法。</p>
<p> 原先的时候是当输入的域名后有多个<code>/</code>的时候404页面的样式表无法加载，比如访问的页面是<br> <code>http://magicer.xyz/dd/d</code>。此时就无]]>
    </summary>
    
      <category term="css" scheme="http://m.magicer.xyz/tags/css/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Animation基础（一）]]></title>
    <link href="http://m.magicer.xyz/2015/10/the-basic-of-android-animation/"/>
    <id>http://m.magicer.xyz/2015/10/the-basic-of-android-animation/</id>
    <published>2015-10-27T07:18:29.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="视图动画（View_Animation）">视图动画（View Animation）</h2><p> 主要有AlphaAnimation ,RotateAnimation,TranslateAnimation,ScaleAnimation四种动画方式，在3.0之前广泛使用，但是由于不具有交互性（当View发生视图动画后，其响应事件的位置仍然在动画前的地方），渐渐的属性动画使用的多起来。一般试图动画制作普通的动画效果，不做交互。优点就是效率高使用方便。</p>
<h3 id="通过XML定义动画">通过XML定义动画</h3><p>在<code>anim</code>文件夹下创建，通过xml创建的动画可读性较好。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml <span class="variable">version=</span><span class="string">"1.0"</span> <span class="variable">encoding=</span><span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;set xmlns:<span class="variable">android=</span><span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    android:<span class="variable">interpolator=</span><span class="string">"@[package:]anim/interpolator_resource"</span></span><br><span class="line">    android:<span class="variable">shareInterpolator=</span>[<span class="string">"true"</span> | <span class="string">"false"</span>] &gt;</span><br><span class="line">    &lt;alpha</span><br><span class="line">        android:<span class="variable">fromAlpha=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toAlpha=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;scale</span><br><span class="line">        android:<span class="variable">fromXScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toXScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">fromYScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toYScale=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotX=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotY=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:<span class="variable">fromXDelta=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toXDelta=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">fromYDelta=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toYDelta=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;rotate</span><br><span class="line">        android:<span class="variable">fromDegrees=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">toDegrees=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotX=</span><span class="string">"float"</span></span><br><span class="line">        android:<span class="variable">pivotY=</span><span class="string">"float"</span> /&gt;</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">&lt;/set&gt;</span><br></pre></td></tr></table></figure></p>
<p>下面来解释一下：<br><code>android:interpolator</code> ：表示动画集合采用的插值器，插值器影响动画的速度。<br><code>android:shareInterpolator</code> ：表示集合中的动画是否和集合公用同一个插值器。<br><code>pivot</code>：支点，枢纽；</p>
<p>通过xml创建的动画怎么使用呢：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animation animation=AnimationUtils.loadAnimation(<span class="keyword">this</span>,R.anim.viewanimation);</span><br><span class="line">view.startAnimation(animation);</span><br></pre></td></tr></table></figure></p>
<h3 id="透明度动画AlphaAnimation">透明度动画AlphaAnimation</h3><p>这个应该很清楚，设置开始值，结束值即可。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AlphaAnimation aa=new AlphaAnimation(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">aa.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(aa);</span><br><span class="line">/*</span><br><span class="line">* <span class="keyword">public</span> AlphaAnimation (<span class="built_in">float</span> fromAlpha, <span class="built_in">float</span> toAlpha)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p>
<h3 id="位移动画_TranslateAnimation">位移动画 TranslateAnimation</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TranslateAnimation ta=new TranslateAnimation(<span class="number">0</span>,<span class="number">300</span>,<span class="number">0</span>,<span class="number">300</span>);</span><br><span class="line">ta.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(ta);</span><br><span class="line">/*</span><br><span class="line">*构造方法一：</span><br><span class="line">*<span class="keyword">public</span> TranslateAnimation (<span class="built_in">float</span> fromXDelta, <span class="built_in">float</span> toXDelta, </span><br><span class="line">                            <span class="built_in">float</span> fromYDelta, <span class="built_in">float</span> toYDelta)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法二</span><br><span class="line">*<span class="keyword">public</span> TranslateAnimation (<span class="built_in">int</span> fromXType, <span class="built_in">float</span> fromXValue, </span><br><span class="line">                            <span class="built_in">int</span> toXType, <span class="built_in">float</span> toXValue, </span><br><span class="line">                            <span class="built_in">int</span> fromYType, <span class="built_in">float</span> fromYValue, </span><br><span class="line">                            <span class="built_in">int</span> toYType, <span class="built_in">float</span> toYValue)</span><br><span class="line">*<span class="keyword">type</span>的值是：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF,</span><br><span class="line">* Animation.RELATIVE_TO_PARENT 之一</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="缩放动画_ScaleAnimation">缩放动画 ScaleAnimation</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ScaleAnimation sa=new ScaleAnimation(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">sa.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(sa);</span><br><span class="line">/*</span><br><span class="line">*构造方法一</span><br><span class="line">*<span class="keyword">public</span> ScaleAnimation (<span class="built_in">float</span> fromX, <span class="built_in">float</span> toX, </span><br><span class="line">                        <span class="built_in">float</span> fromY, <span class="built_in">float</span> toY)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法二</span><br><span class="line">*<span class="keyword">public</span> ScaleAnimation (<span class="built_in">float</span> fromX, <span class="built_in">float</span> toX, </span><br><span class="line">                        <span class="built_in">float</span> fromY, <span class="built_in">float</span> toY, </span><br><span class="line">                        <span class="built_in">float</span> pivotX, <span class="built_in">float</span> pivotY)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法三</span><br><span class="line">*<span class="keyword">public</span> ScaleAnimation (<span class="built_in">float</span> fromX, <span class="built_in">float</span> toX, </span><br><span class="line">                        <span class="built_in">float</span> fromY, <span class="built_in">float</span> toY, </span><br><span class="line">                        <span class="built_in">int</span> pivotXType, <span class="built_in">float</span> pivotXValue, </span><br><span class="line">                        <span class="built_in">int</span> pivotYType, <span class="built_in">float</span> pivotYValue)</span><br><span class="line">*<span class="keyword">type</span>的值是：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, </span><br><span class="line">*Animation.RELATIVE_TO_PARENT 之一</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="旋转动画_RotateAnimation">旋转动画 RotateAnimation</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">RotateAnimation ra=new RotateAnimation(<span class="number">0</span>,<span class="number">360</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line">ra.setDuration(<span class="number">1000</span>);</span><br><span class="line">View.startAnimation(ra);</span><br><span class="line">/*</span><br><span class="line">*构造方法一</span><br><span class="line">*<span class="keyword">public</span> RotateAnimation (<span class="built_in">float</span> fromDegrees, <span class="built_in">float</span> toDegrees)</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法二</span><br><span class="line">*<span class="keyword">public</span> RotateAnimation (<span class="built_in">float</span> fromDegrees, <span class="built_in">float</span> toDegrees, </span><br><span class="line">                        <span class="built_in">float</span> pivotX, <span class="built_in">float</span> pivotY)</span><br><span class="line">*pivotX等于<span class="number">0</span>是左边 Y=<span class="number">0</span>是上边</span><br><span class="line">*/</span><br><span class="line">/*</span><br><span class="line">*构造方法三</span><br><span class="line">*<span class="keyword">public</span> RotateAnimation (<span class="built_in">float</span> fromDegrees, <span class="built_in">float</span> toDegrees, </span><br><span class="line">                        <span class="built_in">int</span> pivotXType, <span class="built_in">float</span> pivotXValue, </span><br><span class="line">                        <span class="built_in">int</span> pivotYType, <span class="built_in">float</span> pivotYValue)</span><br><span class="line">*<span class="keyword">type</span>的值是：Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, </span><br><span class="line">*Animation.RELATIVE_TO_PARENT 之一</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="动画集合SetAnimation">动画集合SetAnimation</h3><p>动画集合简单只需要把需要的动画add上就OK了。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AnimationSet <span class="keyword">as</span>=<span class="keyword">new</span> AnimationSet(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">as</span>.setDuration(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">AlphaAnimation alphaAnimation=<span class="keyword">new</span> AlphaAnimation(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">alphaAnimation.setDuration(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">as</span>.addAnimation(alphaAnimation);</span><br><span class="line"></span><br><span class="line">RotateAnimation rotateAnimation=<span class="keyword">new</span> RotateAnimation(<span class="number">0</span>,<span class="number">360</span>);</span><br><span class="line">rotateAnimation.setDuration(<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">as</span>.addAnimation(rotateAnimation);</span><br><span class="line"></span><br><span class="line">View.startAnimation(<span class="keyword">as</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="视图动画（View_Animation）">视图动画（View Animation）</h2><p> 主要有AlphaAnimation ,RotateAnimation,TranslateAnimation,ScaleAnimation四种动画方式，在3.0之前]]>
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="animation" scheme="http://m.magicer.xyz/tags/animation/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 中实现“再按一次退出程序”的提醒]]></title>
    <link href="http://m.magicer.xyz/2015/10/press-again-to-quit/"/>
    <id>http://m.magicer.xyz/2015/10/press-again-to-quit/</id>
    <published>2015-10-26T06:35:04.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>见很多软件都有 按一次退出程序的提醒，觉得挺人性化，便从网上找到了代码，在这里记录一下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> exitTime=<span class="number">0</span>;</span><br><span class="line"> @Override</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> onKeyDown(<span class="built_in">int</span> <span class="variable">keyCode</span>, KeyEvent event) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">keyCode</span> == KeyEvent.KEYCODE_BACK &amp;&amp; </span><br><span class="line">            event.getAction() == KeyEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((System.currentTimeMillis() - exitTime) &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"再按一次退出程序"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                exitTime = System.currentTimeMillis();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">                System.<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(<span class="variable">keyCode</span>, event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>见很多软件都有 按一次退出程序的提醒，觉得挺人性化，便从网上找到了代码，在这里记录一下：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line]]>
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 中 ListView 的使用]]></title>
    <link href="http://m.magicer.xyz/2015/10/android-listview-general/"/>
    <id>http://m.magicer.xyz/2015/10/android-listview-general/</id>
    <published>2015-10-25T06:45:03.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>ListView是android应用开发中使用频率非常高的一个系统组件，几乎所有的应用中都要用到，尽管现在RecycleView有想要替代ListView的意味，但ListView仍然很重要。所以ListView值得我们深入的研究。下面就记录下ListView的使用。</p>
<h2 id="ViewHolder">ViewHolder</h2><p>使用ViewHolder模式能够提高ListView的效率.基本的使用方法如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolderAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; mData;</span><br><span class="line">    <span class="keyword">private</span> LayoutInflater mInflater;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolderAdapter</span><span class="params">(Context context,List&lt;String&gt; data )</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mData=data;</span><br><span class="line">        mInflater=LayoutInflater.from(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mData.<span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> mData.<span class="title">get</span><span class="params">(position)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        ViewHolder holder=<span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//判断是否缓存</span></span><br><span class="line">        <span class="keyword">if</span> (convertView==<span class="keyword">null</span>)&#123;</span><br><span class="line">            holder=<span class="keyword">new</span> ViewHolder();</span><br><span class="line">            <span class="comment">//实例化布局</span></span><br><span class="line">            convertView=mInflater.inflate(R.layout.listitem,<span class="keyword">null</span>);</span><br><span class="line">            holder.img=(ImageView)convertView.findViewById(R.id.imageView);</span><br><span class="line">            holder.title=(TextView)convertView.findViewById(R.id.textView);</span><br><span class="line"></span><br><span class="line">            convertView.setTag(holder);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//通过Tag找到缓存的布局</span></span><br><span class="line">            holder=(ViewHolder)convertView.getTag();</span><br><span class="line">        &#125;</span><br><span class="line">        holder.img.setBackgroundResource(R.mipmap.ic_launcher);</span><br><span class="line">        holder.title.setText(mData.get(position));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义的ViewHolder类</span></span><br><span class="line">      <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> ImageView img;</span><br><span class="line">        <span class="keyword">public</span> TextView title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="ListView样式">ListView样式</h2><p>divider:分割线颜色，<br>diverHeight:分割线宽度，<br>scrollbars=none:去掉滑动条，<br>listSelector：取消点击效果 （transparent：透明的）<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ListView</span><br><span class="line">      android:<span class="variable">layout_width=</span><span class="string">"wrap_content"</span></span><br><span class="line">      android:<span class="variable">layout_height=</span><span class="string">"wrap_content"</span></span><br><span class="line">      android:<span class="variable">id=</span><span class="string">"@+id/listView"</span></span><br><span class="line">      android:<span class="variable">divider=</span><span class="string">"@android:color/darker_gray"</span></span><br><span class="line">      android:<span class="variable">dividerHeight=</span><span class="string">"1dp"</span></span><br><span class="line">      android:<span class="variable">scrollbars=</span><span class="string">"none"</span> </span><br><span class="line">      android:<span class="variable">listSelector=</span><span class="string">"@android:color/transparent"</span>/&gt;</span><br><span class="line">&lt;ImageView</span><br><span class="line">      android:<span class="variable">layout_width=</span><span class="string">"match_parent"</span></span><br><span class="line">      android:<span class="variable">layout_height=</span><span class="string">"match_parent"</span></span><br><span class="line">      android:<span class="variable">id=</span><span class="string">"@+id/empty_listview"</span></span><br><span class="line">      android:<span class="variable">src=</span><span class="string">"@mipmap/ic_launcher"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>通常可以添加一个默认的图片，在ListView Item 为空的时候显示，<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mListView= (ListView) findViewById(R.<span class="property">id</span>.listView);</span><br><span class="line">mListView.setEmptyView(findViewById(R.<span class="property">id</span>.empty_listview));</span><br></pre></td></tr></table></figure></p>
<h2 id="ListView动态修改">ListView动态修改</h2><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mData.add(<span class="string">"iMac"</span>);</span><br><span class="line">mAdapter.notifyDataSetChanged<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>ListView是android应用开发中使用频率非常高的一个系统组件，几乎所有的应用中都要用到，尽管现在RecycleView有想要替代ListView的意味，但ListView仍然很重要。所以ListView值得我们深入的研究。下面就记录下ListView的使用。</p]]>
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="listview" scheme="http://m.magicer.xyz/tags/listview/"/>
    
      <category term="Android" scheme="http://m.magicer.xyz/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 快捷键的使用]]></title>
    <link href="http://m.magicer.xyz/2015/10/android-studio-keymap/"/>
    <id>http://m.magicer.xyz/2015/10/android-studio-keymap/</id>
    <published>2015-10-25T06:13:17.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>Android Studio 是Google官方的安卓开发IDE ，提供了集成的Android开发工具用于开发和调试，基于Gradle的构建支持。</p>
<p>用好Android Studio 快捷键是必须要掌握的，下面介绍一下AS 的常用快捷键：</p>
<h2 id="常用：">常用：</h2><p><code>Ctrl+Alt +L</code>:  格式化代码（在ubuntu上可能冲突，锁屏快捷键，修改系统的快捷键即可）<br><code>Alt+Insert</code>: 生成代码（get set方法，构造函数等）<br><code>Ctrl+Y</code>: 删除行<br><code>Ctrl+O</code> 显示父类所有的方法<br><code>Ctrl+J</code>：   自动代码<br><code>Ctrl+E</code>  打开最近的文件<br><code>Ctrl+Shift+Backspace</code> 跳转到上次编辑的地方<br><code>Ctrl+F12</code> 显示当前文件的结构<br><code>Alt+Q</code>  可以看到当前方法的声明<br><code>Ctrl+P</code>  显示参数信息<br><code>Ctrl+Shift+Insert</code> 可以选择剪贴板内容并插入</p>
<h2 id="快捷键：">快捷键：</h2><p><code>Alt+回车</code>:   导入包，自动修正<br><code>Ctrl+N</code>:   查找类<br><code>Ctrl+Shift+N</code>: 查找文件<br><code>Ctrl+Alt+L</code>：   格式化代码<br><code>Ctrl+Alt+O</code>:   优化导入的包和类<br><code>Alt+Insert</code>: 生成代码（get set方法，构造函数等）<br><code>Ctrl+E</code>或<code>Alt+Space+C</code>:  最近更改的代码<br><code>Ctrl+Y</code>: 删除行<br><code>Ctrl+F</code>:   查找文本<br><code>Ctrl+R</code>：  替换文本<br><code>Ctrl+D</code>: 集合了复制粘贴<br><code>Ctrl+space</code> 输入代码时按次组合键会列出与之相匹配的类，方法名，成员变量（支持XML）<br><code>Ctrl+向上箭头或向下箭头</code>： 在有自动匹配下拉列表时，次快捷键会自动关闭下拉列表 光标移动到下一行<br><code>Ctrl+F</code> 搜索<br><code>Ctrl+Shift+A</code>：快速查找android studio中的菜单<br><code>Ctrl+B</code>  直接跳转到类，方法，成员变量定义的地方 （Ctrl+鼠标左键）<br><code>Ctrl+O</code> 显示父类所有的方法 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio 是Google官方的安卓开发IDE ，提供了集成的Android开发工具用于开发和调试，基于Gradle的构建支持。</p>
<p>用好Android Studio 快捷键是必须要掌握的，下面介绍一下AS 的常用快捷键：</p>
<h2 id=]]>
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="android studio" scheme="http://m.magicer.xyz/tags/android-studio/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio使用中的问题]]></title>
    <link href="http://m.magicer.xyz/2015/10/android-studio-basic/"/>
    <id>http://m.magicer.xyz/2015/10/android-studio-basic/</id>
    <published>2015-10-15T10:37:15.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>Android Studio 是Google官方的安卓开发IDE，基于Gradle构建app。为了用上as，博主专门加了块内存条（4G）,<br>话说4G的内存真的不够用，开ide在加上虚拟器就够呛了，不过加了内存条后Win有时候会进不去，可能是不兼容吧，嫌麻烦就没在换，反正ubuntu上可以用，这都是题外话了。</p>
<h2 id="添加主题">添加主题</h2><p> as上的配色方案真的是不忍直视，在这里导入第三方的配色方案；<br> 第三方主题:<a href="http://www.ideacolorthemes.org/home/" target="_blank" rel="external">http://www.ideacolorthemes.org/home/</a></p>
<p>下载后：File-&gt;import seetting-&gt;下载主题的路径；</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android Studio 是Google官方的安卓开发IDE，基于Gradle构建app。为了用上as，博主专门加了块内存条（4G）,<br>话说4G的内存真的不够用，开ide在加上虚拟器就够呛了，不过加了内存条后Win有时候会进不去，可能是不兼容吧，嫌麻烦就没在换，反]]>
    </summary>
    
      <category term="android" scheme="http://m.magicer.xyz/tags/android/"/>
    
      <category term="android studio" scheme="http://m.magicer.xyz/tags/android-studio/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客主题NexT使用自定义的CSS样式]]></title>
    <link href="http://m.magicer.xyz/2015/10/hexo-custom-style/"/>
    <id>http://m.magicer.xyz/2015/10/hexo-custom-style/</id>
    <published>2015-10-12T06:21:35.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>  今天，创建自己的about页面的时候，像使用自定义的css样式，就像这是不是NexT可以使用自定义的CSS样式，片尝试了一下，还是可以的，因为markdown支持html标签，使用自定义的CSS样式还是不错的。下面总结一下具体的使用过程：</p>
<h2 id="添加样式支持">添加样式支持</h2><p>  为了不吧原先的像是文件搞得太乱，这里，添加子集的样式文件。<br>  首先，在样式文件的<code>source</code>文件夹下找到<code>css</code>文件夹，打开<code>main.styl</code>文件，在最后添加：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//My Layer</span></span><br><span class="line"><span class="comment">//--------------------------------------------------</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_my/mycss"</span>;</span><br></pre></td></tr></table></figure>
<h2 id="新建自定义样式">新建自定义样式</h2><p>找到样式文件夹<code>css</code> 新建<code>_my</code>文件夹，在其中新建<code>mycss.styl</code>文件，之后就可以按照stylus的格式自定义样式了。</p>
<h2 id="例子">例子</h2><p>例如：我想在文章中添加个自定义样式的按钮，怎么做呢？？？</p>
<p>打开新建的<code>mycss.styl</code>文件，在其中添加样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.myButton</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"><span class="hexcolor">#0f94bd</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"><span class="number">15px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"><span class="number">15px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"><span class="number">15px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value">inline-block</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">cursor</span>:<span class="value">pointer</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#ffffff</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-family</span>:<span class="value">Arial</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">font-size</span>:<span class="value"><span class="number">17px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"><span class="number">11px</span> <span class="number">27px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-decoration</span>:<span class="value">none</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">text-shadow</span>:<span class="value"><span class="number">0px</span> <span class="number">1px</span> <span class="number">0px</span> <span class="hexcolor">#2f6627</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"><span class="rule"><span class="attribute">.myButton</span>:<span class="value">hover &#123;</span><br><span class="line">    background-color:<span class="hexcolor">#5cbf2a</span></span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="rule"><span class="attribute">.myButton</span>:<span class="value">active &#123;</span><br><span class="line">    position:relative</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">1px</span></span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(ps:这里直接使用的css的格式写的，因为css的代码在网上很好找到，而stylus预处理器的就不那么容易找到了，stylus一样支持css格式，所以在这里直接使用了css文件，没有写成stylus语法。其实让我写我也不会，哈哈！)<br>  引用：在想要引用的时候添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"myButton"</span>&gt;</span>MyButton<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>样式如下：<br><a href="#" class="myButton">MyButton</a><br>效果已经出来了，怎么样？？是不是瞬间高大上。。有想要使用的样式，自行百度，找到后粘贴即可使用。</p>
<h2 id="推荐">推荐</h2><p>推荐一个css button样式的生成网站：<a href="http://www.bestcssbuttongenerator.com/" target="_blank" rel="external">http://www.bestcssbuttongenerator.com/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  今天，创建自己的about页面的时候，像使用自定义的css样式，就像这是不是NexT可以使用自定义的CSS样式，片尝试了一下，还是可以的，因为markdown支持html标签，使用自定义的CSS样式还是不错的。下面总结一下具体的使用过程：</p>
<h2 id="添加样]]>
    </summary>
    
      <category term="NexT" scheme="http://m.magicer.xyz/tags/NexT/"/>
    
      <category term="hexo" scheme="http://m.magicer.xyz/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客转移 从github到gitcafe]]></title>
    <link href="http://m.magicer.xyz/2015/10/Hexo-github-gitcafe/"/>
    <id>http://m.magicer.xyz/2015/10/Hexo-github-gitcafe/</id>
    <published>2015-10-11T05:27:08.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>  <img src="/image/HEXO.gif" alt="HEXO" class="full-image"><br>  用Hexo和github搭建博客很长时间了，考虑到自己的博客可能主要的用户都会是国内的，所以想吧博客从github上转移到gitcafe上来，一开始打算转移到coding.net上，不过Coding不能自定义域名所以就没有用Coding，不过访问 <a href="http://magicer.coding.io" target="_blank" rel="external">magicer.coding.io</a> 也能访问我的博客，因为代码也同步到Coding上来了。<br>   下面就记录一下自己博客转移的过程。<a id="more"></a></p>
<h2 id="gitcafe的使用">gitcafe的使用</h2><p>   首先注册gitcafe账户创建项目，此处我创建的项目名跟我的用户名一样。<br>   随后，在自己的家目录的<code>.ssh/</code>目录下找到<code>id_rsa.pub</code>文件，打开后复制内容粘贴到gitcafe的 <code>SSH公钥管理</code>中新建SSH公钥（如果配置过github会存在<code>.ssh/</code>文件夹，如果没有的话，需要配置，配置方法见：<a href="http://0.0.0.0:4001/2015/04/30/github-config/" target="_blank" rel="external">配置github</a>，测试的时候只需要将github换成gitcafe即可。）</p>
<!-- HTML -->
<p>   <img src="/image_code/gitcafe-ssh-setting.png" alt="SSH设置"></p>
<h2 id="托管代码到gitcafe">托管代码到gitcafe</h2><p>  在这里说明，我安装了git插件，安装方法：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>在<code>_config.yml.</code>中配置（可以同时托管代码在github和gitcafe上，）</p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  <span class="literal">message</span>: [<span class="literal">message</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#或者:</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  <span class="literal">message</span>: [<span class="literal">message</span>]</span><br><span class="line">  repo: </span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    gitcafe: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure>
<h2 id="pages服务">pages服务</h2><p>  托管上代码之后应该分支应该会直接是<code>gitcafe-pages</code>分支，之后<code>项目设置</code>自定义域名<br>  <img src="/image_code/Gitcafe-pages-setting.png" alt="gitcafe-pages"></p>
<p>  修改域名的解析搬移即可完成。<br>  新建CNAME解析，解析到<code>gitcafe.io</code>,现在gitcafe已经不支持A记录解析方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  <img src="/image/HEXO.gif" alt="HEXO" class="full-image"><br>  用Hexo和github搭建博客很长时间了，考虑到自己的博客可能主要的用户都会是国内的，所以想吧博客从github上转移到gitcafe上来，一开始打算转移到coding.net上，不过Coding不能自定义域名所以就没有用Coding，不过访问 <a href="http://magicer.coding.io">magicer.coding.io</a> 也能访问我的博客，因为代码也同步到Coding上来了。<br>   下面就记录一下自己博客转移的过程。]]>
    
    </summary>
    
      <category term="gitcafe" scheme="http://m.magicer.xyz/tags/gitcafe/"/>
    
      <category term="github" scheme="http://m.magicer.xyz/tags/github/"/>
    
      <category term="hexo" scheme="http://m.magicer.xyz/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo博客主题换成了NexT]]></title>
    <link href="http://m.magicer.xyz/2015/08/blog-theme-changed/"/>
    <id>http://m.magicer.xyz/2015/08/blog-theme-changed/</id>
    <published>2015-08-20T12:31:37.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://gitcafe.com/Magicer/Magicer/raw/gitcafe-pages/image/756094.jpg" alt="NexT" class="full-image"><br>博客主题由原先的Jacman换成了现在高大上的NexT主题，Jacman主题显得过于花哨，而NexT却显得高大上一点。比较了一下，还是更喜欢NexT的感觉。下面就简单说明一下过程。<br>详细的下载安装及设置教程在这里：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a><br> 效果图就不用看了吧，毕竟效果已经摆出来了，如果你也喜欢，那就动手吧。</p>
<h2 id="自定义NexT">自定义NexT</h2><p> 1、添加Title 。<br>  NexT主题的Title和网站主页上的左上角的LOGO字体是一样的，在这里我想设置成不一样的怎么办呢？其实很简单，只需要在配置文件中添加一个<code>name</code>（注意：这个配置文件的位置是HEXO的配置文件不是主题的配置文件。<br>  ps：我觉得还是用logo比较好，由于子集以前就是用的name，在这里就不更改了）<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">title</span>: <span class="string">Magicer|张同爽的个人博客</span></span><br><span class="line"><span class="attribute">name</span>: <span class="string">Magicer</span></span><br></pre></td></tr></table></figure></p>
<p>然后，在NexT主题文件夹中找到<code>layout</code>文件夹下的<code>_partials</code>文件夹下的<code>header.swig</code>文件 找到：</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"site-title"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>将<code>config.title</code>修改为<code>config.name</code>即可<br>2、使页面地步链接到about界面</p>
<p>找到：主题<code>layout</code>文件夹下的<code>_partials</code>文件夹下的 <code>footer.swig</code>文件：<br>找到：</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">itemprop</span>=<span class="value">"copyrightHolder"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.author</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>将其改为</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"theme-link"</span> <span class="attribute">href</span>=<span class="value">"/about/index.html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">itemprop</span>=<span class="value">"copyrightHolder"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.author</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>当然也可以连接到一个网址，比如我的设置就是这样的：</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"theme-link"</span> <span class="attribute">href</span>=<span class="value">"http://magicer.xyz"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"author"</span> <span class="attribute">itemprop</span>=<span class="value">"copyrightHolder"</span>&gt;</span></span><span class="expression">&#123;&#123; <span class="variable">config.author</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://gitcafe.com/Magicer/Magicer/raw/gitcafe-pages/image/756094.jpg" alt="NexT" class="full-image"><br>博客主题由原先的Jacman换成了现在高大]]>
    </summary>
    
      <category term="hexo" scheme="http://m.magicer.xyz/tags/hexo/"/>
    
      <category term="Hexo" scheme="http://m.magicer.xyz/categories/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决vim使用过程中与遇到问题]]></title>
    <link href="http://m.magicer.xyz/2015/08/vim-notes/"/>
    <id>http://m.magicer.xyz/2015/08/vim-notes/</id>
    <published>2015-08-14T04:02:47.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="vim中无法输入中文或输入中文乱码">vim中无法输入中文或输入中文乱码</h2><p>  打开终端输入：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> ～/.vimrc</span><br><span class="line">##也可以 <span class="keyword">vim</span> /etc/<span class="keyword">vim</span>/vimrc</span><br></pre></td></tr></table></figure></p>
<p>在其中输入以下代码：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> encoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> langmenu=zh_CN.UTF-<span class="number">8</span></span><br><span class="line">language <span class="keyword">message</span> zh_CN.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">set</span> fileencodings=ucs-bom,utf-<span class="number">8</span>,cp936,gb18030,big5,euc-jp,euc-kr,latin1</span><br><span class="line"><span class="keyword">set</span> fileencoding=utf-<span class="number">8</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="vim中无法输入中文或输入中文乱码">vim中无法输入中文或输入中文乱码</h2><p>  打开终端输入：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span clas]]>
    </summary>
    
      <category term="vim" scheme="http://m.magicer.xyz/tags/vim/"/>
    
      <category term="Software" scheme="http://m.magicer.xyz/categories/Software/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java初学常用代码知识]]></title>
    <link href="http://m.magicer.xyz/2015/08/java-code-fragment/"/>
    <id>http://m.magicer.xyz/2015/08/java-code-fragment/</id>
    <published>2015-08-01T12:34:31.000Z</published>
    <updated>2016-09-05T06:42:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="File类">File类</h2><p>File类的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String pathname)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(File parent,String child)</span></span>;</span><br></pre></td></tr></table></figure>
<p>使用File操作文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">creatNewFile</span><span class="params">()</span> <span class="keyword">throws</span> IOExcetion <span class="comment">//创建文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span>                         <span class="comment">//删除文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span>                         <span class="comment">//判断给定的路径是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String separator            <span class="comment">//  “/” 注意：常量，但是未大写</span></span><br><span class="line"><span class="keyword">public</span> File <span class="title">getParentFile</span><span class="params">()</span>                     <span class="comment">//找到一个指定路径的父路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span>                         <span class="comment">//创建制定目录</span></span><br><span class="line"><span class="comment">/*其他方法*/</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span>         <span class="comment">//取得文件的名字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span>    <span class="comment">//判断给定的路径是否是文件夹</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span>         <span class="comment">//判断给定的路径是否是文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHidden</span><span class="params">()</span>       <span class="comment">//判断是否隐藏</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span>      <span class="comment">//文件最后一次修改日期</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span>            <span class="comment">//取得文件大小，以字节为单位返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">renameTo</span><span class="params">(File dest)</span>  <span class="comment">//为文件重命名</span></span><br><span class="line"><span class="keyword">public</span> File[] <span class="title">listFiles</span><span class="params">()</span>   <span class="comment">//将目录中所有的文件以File对象数组的方式返回</span></span></span><br></pre></td></tr></table></figure></p>
<p>简单示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  判断制定文件是否存在，若存在则删除，不存在则创建*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(File.separator + <span class="string">"home"</span> + File.separator</span><br><span class="line">                + <span class="string">"magicer"</span> + File.separator + <span class="string">"code"</span> + File.separator</span><br><span class="line">                + <span class="string">"Demo.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="File类">File类</h2><p>File类的构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="java" scheme="http://m.magicer.xyz/tags/java/"/>
    
      <category term="Java" scheme="http://m.magicer.xyz/categories/Java/"/>
    
  </entry>
  
</feed>